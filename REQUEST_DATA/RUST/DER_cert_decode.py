from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from cryptography.x509 import load_der_x509_certificate

def extract_cert_from_der(der_hex_string):
    # Convert the hexadecimal string to binary (DER format)
    der_bytes = bytes.fromhex(der_hex_string)

    # Load the certificate from the DER-encoded bytes
    certificate = load_der_x509_certificate(der_bytes, default_backend())

    # Extract and return the certificate's public key
    public_key = certificate.public_key()

    # Serialize the public key to PEM format (optional)
    pem_public_key = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    # Return the PEM formatted public key and other certificate details
    return {
        "certificate": certificate,
        "public_key_pem": pem_public_key.decode("utf-8"),
        "subject": certificate.subject,
        "issuer": certificate.issuer,
        "serial_number": certificate.serial_number,
        "not_valid_before": certificate.not_valid_before,
        "not_valid_after": certificate.not_valid_after
    }

# Example usage:
der_hex_string
result = extract_cert_from_der(der_hex_string)

# Print results
print("Public Key (PEM Format):")
print(result["public_key_pem"])

print("\nCertificate Details:")
print(f"Subject: {result['subject']}")
print(f"Issuer: {result['issuer']}")
print(f"Serial Number: {result['serial_number']}")
print(f"Valid From: {result['not_valid_before']}")
print(f"Valid Until: {result['not_valid_after']}")
